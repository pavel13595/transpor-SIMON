class FormHandler{constructor(){this.init()}init(){this.bindContactForm();this.initializeFormValidation();this.setupFloatingLabels()}bindContactForm(){const contactForm=document.getElementById("contactForm");if(!contactForm)return;contactForm.addEventListener("submit",e=>{e.preventDefault();this.handleContactFormSubmit(contactForm)})}async handleContactFormSubmit(form){const formData=new FormData(form);const submitButton=form.querySelector('button[type="submit"]');const originalText=submitButton.textContent;this.setButtonLoading(submitButton,true);try{if(!this.validateForm(form)){throw new Error("Please fill in all required fields correctly.")}await this.simulateFormSubmission(formData);this.showMessage("success",this.getLocalizedMessage("form_success"));form.reset();this.resetFloatingLabels(form)}catch(error){this.showMessage("error",error.message||this.getLocalizedMessage("form_error"))}finally{this.setButtonLoading(submitButton,false,originalText)}}validateForm(form){const requiredFields=form.querySelectorAll("[required]");let isValid=true;requiredFields.forEach(field=>{if(!this.validateField(field)){isValid=false}});return isValid}validateField(field){const value=field.value.trim();const fieldType=field.type;let isValid=true;let errorMessage="";field.classList.remove("error");this.removeFieldError(field);if(field.hasAttribute("required")&&!value){isValid=false;errorMessage=this.getLocalizedMessage("field_required")}else if(fieldType==="email"&&value&&!this.isValidEmail(value)){isValid=false;errorMessage=this.getLocalizedMessage("email_invalid")}else if(fieldType==="tel"&&value&&!this.isValidPhone(value)){isValid=false;errorMessage=this.getLocalizedMessage("phone_invalid")}if(!isValid){field.classList.add("error");this.showFieldError(field,errorMessage)}return isValid}isValidEmail(email){const emailRegex=/^[^\s@]+@[^\s@]+\.[^\s@]+$/;return emailRegex.test(email)}isValidPhone(phone){const phoneRegex=/^[\+]?[(]?[\d\s\-\(\)]{10,}$/;return phoneRegex.test(phone)}showFieldError(field,message){const errorElement=document.createElement("span");errorElement.className="field-error";errorElement.textContent=message;const formGroup=field.closest(".form__group");if(formGroup){formGroup.appendChild(errorElement)}}removeFieldError(field){const formGroup=field.closest(".form__group");if(formGroup){const errorElement=formGroup.querySelector(".field-error");if(errorElement){errorElement.remove()}}}setupFloatingLabels(){const formInputs=document.querySelectorAll(".form__group input, .form__group textarea");formInputs.forEach(input=>{this.updateLabelState(input);input.addEventListener("focus",()=>this.updateLabelState(input));input.addEventListener("blur",()=>this.updateLabelState(input));input.addEventListener("input",()=>this.updateLabelState(input))})}updateLabelState(input){const formGroup=input.closest(".form__group");const label=formGroup.querySelector("label");if(!label)return;if(input.value.trim()||input===document.activeElement){label.classList.add("active")}else{label.classList.remove("active")}}resetFloatingLabels(form){const labels=form.querySelectorAll(".form__group label");labels.forEach(label=>label.classList.remove("active"))}setButtonLoading(button,isLoading,originalText=""){if(isLoading){button.disabled=true;button.innerHTML=`\n                <svg class="loading-spinner" width="16" height="16" viewBox="0 0 24 24" fill="none">\n                    <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-dasharray="32" stroke-dashoffset="32">\n                        <animate attributeName="stroke-dashoffset" dur="1s" values="32;0;32" repeatCount="indefinite"/>\n                    </circle>\n                </svg>\n                ${this.getLocalizedMessage("sending")}\n            `}else{button.disabled=false;button.textContent=originalText||this.getLocalizedMessage("send_message")}}showMessage(type,message){this.removeMessages();const messageElement=document.createElement("div");messageElement.className=`form-message form-message--${type}`;messageElement.innerHTML=`\n            <div class="form-message__content">\n                <i class="fas fa-${type==="success"?"check-circle":"exclamation-circle"}"></i>\n                <span>${message}</span>\n            </div>\n        `;const contactForm=document.getElementById("contactForm");if(contactForm){contactForm.insertBefore(messageElement,contactForm.firstChild)}setTimeout(()=>{this.removeMessages()},5e3)}removeMessages(){const messages=document.querySelectorAll(".form-message");messages.forEach(message=>message.remove())}async simulateFormSubmission(formData){await new Promise(resolve=>setTimeout(resolve,1500));console.log("Form submission data:");for(let[key,value]of formData.entries()){console.log(`${key}: ${value}`)}}getLocalizedMessage(key){const currentLang=window.languageSwitcher?window.languageSwitcher.getCurrentLanguage():"en";const messages={en:{field_required:"This field is required",email_invalid:"Please enter a valid email address",phone_invalid:"Please enter a valid phone number",form_success:"Thank you! Your message has been sent successfully.",form_error:"Sorry, there was an error sending your message. Please try again.",sending:"Sending...",send_message:"Send Message"},fr:{field_required:"Ce champ est obligatoire",email_invalid:"Veuillez entrer une adresse email valide",phone_invalid:"Veuillez entrer un numéro de téléphone valide",form_success:"Merci ! Votre message a été envoyé avec succès.",form_error:"Désolé, une erreur s'est produite lors de l'envoi de votre message. Veuillez réessayer.",sending:"Envoi en cours...",send_message:"Envoyer le Message"}};return messages[currentLang]?.[key]||messages.en[key]||key}initializeFormValidation(){const formInputs=document.querySelectorAll(".form__group input, .form__group textarea");formInputs.forEach(input=>{input.addEventListener("blur",()=>{if(input.value.trim()){this.validateField(input)}});input.addEventListener("input",()=>{if(input.classList.contains("error")){input.classList.remove("error");this.removeFieldError(input)}})})}}const formStyles=document.createElement("style");formStyles.textContent=`\n    .form__group {\n        position: relative;\n    }\n    \n    .form__group input.error,\n    .form__group textarea.error {\n        border-color: var(--error-color);\n        box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);\n    }\n    \n    .field-error {\n        display: block;\n        color: var(--error-color);\n        font-size: var(--font-size-small);\n        margin-top: 0.25rem;\n        margin-left: 1rem;\n    }\n    \n    .form-message {\n        padding: 1rem;\n        border-radius: var(--radius-md);\n        margin-bottom: 1.5rem;\n        animation: slideInDown 0.3s ease-out;\n    }\n    \n    .form-message--success {\n        background-color: rgba(16, 185, 129, 0.1);\n        border: 1px solid var(--success-color);\n        color: var(--success-color);\n    }\n    \n    .form-message--error {\n        background-color: rgba(239, 68, 68, 0.1);\n        border: 1px solid var(--error-color);\n        color: var(--error-color);\n    }\n    \n    .form-message__content {\n        display: flex;\n        align-items: center;\n        gap: 0.5rem;\n    }\n    \n    .loading-spinner {\n        animation: spin 1s linear infinite;\n        margin-right: 0.5rem;\n    }\n    \n    @keyframes spin {\n        from { transform: rotate(0deg); }\n        to { transform: rotate(360deg); }\n    }\n    \n    @keyframes slideInDown {\n        from {\n            opacity: 0;\n            transform: translateY(-10px);\n        }\n        to {\n            opacity: 1;\n            transform: translateY(0);\n        }\n    }\n    \n    .form__group label.active {\n        top: -0.5rem;\n        left: 0.75rem;\n        font-size: var(--font-size-small);\n        color: var(--primary-color);\n    }\n`;document.head.appendChild(formStyles);document.addEventListener("DOMContentLoaded",function(){window.formHandler=new FormHandler});